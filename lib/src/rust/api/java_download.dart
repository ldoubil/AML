// This file is automatically generated, so please do not edit it.
// @generated by `flutter_rust_bridge`@ 2.10.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `auto_install_java_impl`, `check_jre_impl`, `download_file`, `extract_zip`, `fetch_java_packages`, `get_default_java_dir`, `get_max_memory_impl`, `get_system_arch`, `get_system_os`
// These types are ignored because they are neither used by any `pub` functions nor (for structs and enums) marked `#[frb(unignore)]`: `AzulPackageResponse`, `JavaPackage`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `clone`, `clone`, `fmt`, `fmt`, `fmt`

/// 从版本字符串中提取主版本号
Future<int> extractJavaVersion({required String version}) =>
    RustLib.instance.api
        .crateApiJavaDownloadExtractJavaVersion(version: version);

/// 自动安装 Java (带进度显示)
/// 返回安装路径，如果失败返回 None
Future<String?> autoInstallJava(
        {required int javaVersion,
        required String appDataDir,
        required FutureOr<void> Function(double, String) onProgress,
        required FutureOr<void> Function(bool, String?) onComplete}) =>
    RustLib.instance.api.crateApiJavaDownloadAutoInstallJava(
        javaVersion: javaVersion,
        appDataDir: appDataDir,
        onProgress: onProgress,
        onComplete: onComplete);

/// 检查指定路径的 JRE
Future<JavaRuntimeVersion?> checkJre({required String javaPath}) =>
    RustLib.instance.api.crateApiJavaDownloadCheckJre(javaPath: javaPath);

/// 测试指定路径的 JRE 是否符合要求的版本
Future<bool> testJre(
        {required String javaPath, required int expectedMajorVersion}) =>
    RustLib.instance.api.crateApiJavaDownloadTestJre(
        javaPath: javaPath, expectedMajorVersion: expectedMajorVersion);

/// 检查系统中已安装的 Java
Future<JavaRuntimeVersion?> checkJavaInstallation() =>
    RustLib.instance.api.crateApiJavaDownloadCheckJavaInstallation();

/// 获取系统最大内存 (KB)
Future<PlatformInt64> getMaxMemory() =>
    RustLib.instance.api.crateApiJavaDownloadGetMaxMemory();

/// Java 运行时版本信息结构体
class JavaRuntimeVersion {
  final String version;
  final String path;
  final int majorVersion;

  const JavaRuntimeVersion({
    required this.version,
    required this.path,
    required this.majorVersion,
  });

  @override
  int get hashCode => version.hashCode ^ path.hashCode ^ majorVersion.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is JavaRuntimeVersion &&
          runtimeType == other.runtimeType &&
          version == other.version &&
          path == other.path &&
          majorVersion == other.majorVersion;
}
